<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBulletRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Bullet speed
bulletSpeed = 8;
//Push force for how far it should push the player
pushForce = 15 + objPlayer.moveSpeed; //We need to add player move speed to calculate their current move force
//How hard a bullet will shake the screen
bulletShakeValue = 10;
//Play shot sound
audio_play_sound(sndBulletShot, 3, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking for wall collisions to bounce
if(objDebug.collisionMode == "bounce")
{
    if(place_meeting(x + hspeed, y + vspeed, objLeftWall))
    {
        hspeed *= -1;
    }
    else if(place_meeting(x + hspeed, y + vspeed, objRightWall))
    {
        hspeed *= -1;
    }
    else if(place_meeting(x + hspeed, y + vspeed, objTopWall))
    {
        vspeed *= -1;
    }
    else if(place_meeting(x + hspeed, y + vspeed, objBottomWall))
    {
        vspeed *= -1;
    }
}
else if(objDebug.collisionMode == "wrap")
{
    if(x &gt; objRightWall.x)
    {
        x = objLeftWall.x + sprite_width;
    }
    else if(x &lt; objLeftWall.x + sprite_width)
    {
        x = objRightWall.x;
    }
    else if(y &gt; objBottomWall.y)
    {
        y = objTopWall.y + sprite_height;
    }
    else if(y &lt; objTopWall.y + sprite_height)
    {
        y = objBottomWall.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set image index to actual bullet sprite
image_index = 1;
// proper sprite
if (owner == 1) {
    sprite_index = sprBulletGreen;
} else {
    sprite_index = sprBulletRed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
